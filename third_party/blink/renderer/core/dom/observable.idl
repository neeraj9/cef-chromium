// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/observable

callback SubscribeCallback = void (Subscriber subscriber);
callback ObserverCallback = void (any value);
callback ObserverCompleteCallback = void ();

// TODO(crbug.com/14859810): Introduce `Mapper` when `map()` is implemented,
// since we reference it in the below comment.
//
// Differs from Mapper only in return type, since this callback is exclusively
// used to visit each element in a sequence, not transform it.
callback Visitor = undefined (any element, unsigned long long index);

dictionary Observer {
  ObserverCallback next;
  ObserverCallback error;
  ObserverCompleteCallback complete;
};

dictionary SubscribeOptions {
  AbortSignal signal;
};

typedef (ObserverCallback or Observer) ObserverUnion;

[Exposed=(Window,Worker), RuntimeEnabled=ObservableAPI]
interface Observable {
  [CallWith=ScriptState, MeasureAs=ObservableConstructor] constructor(SubscribeCallback callback);
  [CallWith=ScriptState] void subscribe(optional ObserverUnion observer = {}, optional SubscribeOptions options = {});

  // Observable-returning operators.
  // See https://wicg.github.io/observable/#observable-returning-operators.
  //
  // TODO(crbug.com/1485981): The `Observable` argument type below should be
  // `any`, and the conversion semantics (that have not yet been implemented)
  // should convert that `any` into an `Observable`.
  [CallWith=ScriptState] Observable takeUntil(Observable notifier);

  // Promise-returning operators.
  // See https://wicg.github.io/observable/#promise-returning-operators.
  [CallWith=ScriptState] Promise<sequence<any>> toArray(optional SubscribeOptions options = {});
  [CallWith=ScriptState] Promise<undefined> forEach(Visitor callback, optional SubscribeOptions options = {});
};

